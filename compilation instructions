You need to download FSL from source (no need to install) and add the follow to your .bash_profile

export FSLDIR=<path to your extracted fsl>
. ${FSLDIR}/etc/fslconf/fsl.sh

You also need to add 

export FSLDEVDIR=<folder where includes and libraries will go>

Then create $FSLDEVDIR and associated folders:
mkdir -p  $FSLDEVDIR  $FSLDEVDIR/extras $FSLDEVDIR/extras/include $FSLDEVDIR/extras/src

Copy/move the folder extras/ELC1.04/ELC from this repository to your $FSLDEVDIR as $FSLDEVDIR/extras/include/ELC
Copy $FSLDIR/src/FastPDlib to $FSLDEVDIR/extras/src

Then compile (make install) each repository directory in order (note you require c++11 support):

newmesh
DiscreteOpt
FastPDlib (from $FSLDEVDIR/extras/src)
MSMRegLib
MSM

Binaries will be deposited in the MSM folder

# Build in docker for the struct pipeline

Start the struct pipeline docker with:

	docker run --rm -it --entrypoint /bin/bash \
		biomedia/dhcp-structural-pipeline:emma

Then:

	. /etc/fsl/fsl.sh 
	# fsl binary is built for 4.8, we need to build with 4.8 to link
	# against it
	apt update && apt upgrade -y && apt install -y vim gcc-4.8 g++-4.8
	vi ${FSLDIR}/etc/fslconf/fsl.sh 
		uncomment the lines for FSLCONFDIR, FSLMACHTYPE, 
		and the associated export
	cp -r ${FSLDIR}/config/linux_64-gcc4.8 ${FSLDIR}/config/gnu_64-gcc5.4
	# we are a "gcc 5.4 system", but we want to use the 4.8 compiler we
	# installed
	vi ${FSLDIR}/config/gnu_64-gcc5.4/systemvars.mk 
		edit:
			CC = gcc-4.8
			CXX = g++-4.8
			CXX11 = g++-4.8
	. $FSLDIR/etc/fslconf/fsl.sh
	export FSLDEVDIR=$FSLDIR
	cd /usr/src
	git clone https://github.com/jcupitt/MSM_HOCR.git
	cd MSM_HOCR
	git checkout struct-pipeline-build
	cp -r extras/ELC1.04/ELC $FSLDEVDIR/extras/include/ELC
	cp -r $FSLDIR/src/FastPDlib $FSLDEVDIR/extras/src
	cd src/newmesh
	make 
	make install
	cd ../DiscreteOpt
	make 
	make install
	cd $FSLDEVDIR/extras/src/FastPDlib/
	make
	make install
	cd /usr/src/MSM_HOCR/src/MSMRegLib/
	make
	make install
	cd ../MSM
	make
	make install

	msm.o: In function `MESHREG::MeshModify::print_config_options()':
/usr/local/fsl/include/MeshReg/meshmodify.h:237: undefined reference to `MESHREG::MeshModify::parse_reg_options(std::string const&)'

could it be linking against the old mesh class? should be -lnewmeshclass now



try again with a clean base




MSM make fails with link error

c++ -Wl,-rpath,'$ORIGIN/../lib' 
	-L/usr/local/fsl/extras/lib -lopenblas 
	-L/usr/local/fsl/extras/lib 
	-L/lib64  
	-L/usr/local/fsl/extras/lib 
	-L/usr/local/fsl/extras/lib 
	-L/usr/local/fsl/extras/lib 
	-L/usr/local/fsl/extras/lib 
	-L/usr/local/fsl/extras/lib   
	-L. 
	-L/usr/local/fsl/lib  
	-L/usr/local/fsl/extras/lib 
	-L. 
	-L/usr/local/fsl/lib 
	-L/usr/local/fsl/lib 
	-o msm msm.o -lmeshreg -lfastpd -ldiscrete -lnewmeshclass -lfslsurface -lgiftiio -lmm -lexpat -lfslvtkio -lnewimage -lmiscmaths -lmiscplot -lmiscpic -lNewNifti -lutils  -lbint -lnewran -lprob -lznz -lgdc -lgd -lpng  -lz


msm.o: In function 
	Utilities::Option<
		std::__cxx11::basic_string<
			char, 
			std::char_traits<char>, 
			std::allocator<char> 
		> 
	>::set_value(
		std::__cxx11::basic_string<
			char, 
			std::char_traits<char>, 
			std::allocator<char> 
		> const&
	):

/usr/local/fsl/include/utils/options.h:342: undefined reference to 
	Utilities::string_to_T(
		std::__cxx11::basic_string<
			char, 
			std::char_traits<char>, 
			std::allocator<char> 
		>&, 
		std::__cxx11::basic_string<
			char, 
			std::char_traits<char>, 
			std::allocator<char> 
		> const&)


probably a compiler version problem ... 5.4 must mangle names slightly
differently from 4.8


